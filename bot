import re
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = '7573460204:AAFMdiyzV-4mkzrfBsxqRDFmVcmiezzuJqg'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å —Å –∫—É—Ä—Å–∞–º–∏
COURSES = {
    "html": "HTML & CSS –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
    "js": "JavaScript —Å –Ω—É–ª—è",
    "react": "React.js –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤"
}

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class Registration(StatesGroup):
    course = State()
    name = State()
    email = State()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ email
def is_valid_email(email: str) -> bool:
    pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    return re.match(pattern, email) is not None

# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, callback_data=f"course_{id}")]
        for id, name in COURSES.items()
    ])
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å—ã –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Å–∞–π—Ç–æ–≤.\n\n"
        "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∫—É—Ä—Å:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
@dp.callback_query(F.data.startswith("course_"))
async def process_course(callback_query, state: FSMContext):
    course_id = callback_query.data.split("_")[1]
    
    if course_id not in COURSES:
        await callback_query.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await state.update_data(course=course_id)
    await state.set_state(Registration.name)
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
@dp.message(Registration.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Registration.email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ email
@dp.message(Registration.email)
async def process_email(message: Message, state: FSMContext):
    email = message.text
    
    if not is_valid_email(email):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(email=email)
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ë–î)
    print(f"–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {data}")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    course_name = COURSES[data['course']]
    await message.answer(
        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –∫—É—Ä—Å:\n\n"
        f"üîπ –ö—É—Ä—Å: {course_name}\n"
        f"üîπ –ò–º—è: {data['name']}\n"
        f"üîπ Email: {data['email']}\n\n"
        "–ú—ã –≤—ã—à–ª–µ–º –≤–∞–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞ email!",
        parse_mode=ParseMode.MARKDOWN
    )
    
    await state.clear()

# –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await state.clear()
    await message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
